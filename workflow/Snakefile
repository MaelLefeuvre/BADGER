configfile: "./config/config.yml"
#include: "rules/00-netrules.smk"
include: "rules/00-preprocess-reference.smk"
include: "rules/00-preprocess-1000g-phase3.smk"
include: "rules/01-pedigree-sims.smk"
include: "rules/02-adna-simulations.smk"
include: "rules/03-align-fastqs.smk"
include: "rules/04-preprocess-bams.smk"
include: "rules/05-variant-calling.smk"
include: "rules/06-KIN.smk"
include: "rules/06-READ.smk"
include: "rules/06-grups-rs.smk"
include: "rules/06-TKGWV2.smk"
include: "rules/07-archive.smk"

localrules: meta, READ, GRUPS, TKGWV2, ped_sim, all

wildcard_constraints:
    chr    = "\d+",
    sample = "ped[0-9]{1,2}_[-gGbBiIsS0-9]+"

# ---- Download dataset 
#module netrules:
#    snakefile: "rules/00-netrules.smk"
#    config: config
#use rule * from netrules

#rule fetch_data:
#    input:
#        expand(rules.download_1000_genomes.output.vcf, chr=range(1,23)),
#        rules.fetch_samples_panel.output.panel,
#        rules.download_reference_genome.output.refgen.format(reference="Homo_sapiens.GRCh37.dna.primary_assembly"),
#        rules.download_HapMapII_recombination_map.output.map,
#        rules.fetch_sex_specific_recombination_map.output.gen_maps,
#        rules.fetch_interference_map.output.intf_map,
#        rules.download_reich_1240K.output.eigenstrat,
#        rules.download_TKGWV2_support_files.output.support_files,

# ---- Archive and compress results into a separate directory (see config.yml)
#module archive_run:
#    snakefile: "rules/07-archive.smk"
#    config: config
#use rule archive from archive_run

# ---- Generate a global metadata file. Keeps track of seeding values + commit hashes.
rule meta:
    output:
        metadata = "results/meta/pipeline-metadata.yml"
    script: "scripts/print-meta.py"

# ---- Kinship estimation tools
rule KIN:
    input:
        rules.meta.output,
        KIN_output

rule READ:
    input: 
        rules.meta.output,
        READ_output

rule GRUPS:
    input:
        rules.meta.output,
        GRUPS_output


rule TKGWV2:
    input:
        rules.meta.output,
        TKGWV2_output

rule ped_sim:
    input: 
        rules.meta.output,
        expand("results/00-ped-sim/{POP}-pedigrees-M2-m2-snps-merged.vcf.gz", POP=config['ped-sim']['params']['pop'])


rule all:
    default_target: True
    input:
        rules.meta.output,
        rules.KIN.input,
        rules.READ.input,
        rules.GRUPS.input,
        rules.TKGWV2.input



